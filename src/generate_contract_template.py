from src import errors
import odfdo
import io

def format_product_identifier(product, shipment_number: str = "1") -> str:
    """Format identifier for products
    Parameters:
        product(dict): product to identify
        shipment_numbr(str): optionnal shipment number to add to identifier.
    Returns:
        identifier of the product, containing name, format, weight, and shipment number.
    """
    name = '_'.join(product["name"].rstrip().split(" "))
    weight = ""
    if product['weight'].isdigit():
        weight = product['weight']
    else:
        weight = '-'.join(product['weight'].rstrip().split(' '))
    return(f"{name}_{product['format']}_{weight}_shipment_{shipment_number}")

def create_cell_styles(document: odfdo.Document) -> tuple[str]:
    """Create a Cell style, insert it in odfdo., return its name.
    Parameters:
        document(odfdo.document): document to add style to.
    Returns:
        tuple of styles names to correctly style cells inside a table
    """
    border = odfdo.make_table_cell_border_string(thick="0.005cm", color="black")
    cell_style_top = odfdo.create_table_cell_style(
        color="black",
        border_top=border,
        border_left=border,
        padding="0.1cm"
    )
    cell_style_bottom = odfdo.create_table_cell_style(
        color="black",
        border_top=border,
        border_bottom=border,
        border_left=border,
        padding="0.1cm"
    )
    cell_style_right = odfdo.create_table_cell_style(
        color="black",
        border_top=border,
        border_left=border,
        border_right=border,
        padding="0.1cm"
    )
    cell_style_last = odfdo.create_table_cell_style(
        color="black",
        border_top=border,
        border_left=border,
        border_right=border,
        border_bottom=border,
        padding="0.1cm"
    )
    style_name_top = document.insert_style(style=cell_style_top, automatic=True)
    style_name_bottom = document.insert_style(style=cell_style_bottom, automatic=True)
    style_name_right = document.insert_style(style=cell_style_right, automatic=True)
    style_name_last = document.insert_style(style=cell_style_last, automatic=True)
    return cell_style_top, style_name_bottom, style_name_right, style_name_last

def apply_cell_border_styles_to_table(table: odfdo.table, style_border_top: str, style_border_bottom: str, style_border_right: str, style_border_last: str):
    """Apply styles to cells of all tables in a document to create seemless borders.
    Parameters:
        document(odfdo.Row): Row of cells in a table to modify.
        style_border_top(str): name of the style for top borders.
        style_border_bottom(str): name of the style for bottom borders.
        style_border_right(str): name of the style for right borders.
        style_border_last(str): name of the style for last cell borders.
    """
    rows = table.rows
    for index_r, row in enumerate(table.iter_rows()):
        cells = row.cells
        for index_c, cell in enumerate(row.iter_cells()):
            if index_c == len(cells) - 1 and index_r == len(rows) - 1:
                cell.style = style_border_last
                row.set_cell(x=cell.x, cell=cell)
            elif index_c == len(cells) - 1:
                cell.style = style_border_right
                row.set_cell(x=cell.x, cell=cell)
            elif index_r == len(rows) - 1:
                cell.style = style_border_bottom
                row.set_cell(x=cell.x, cell=cell)
            else:
                cell.style = style_border_top
                row.set_cell(x=cell.x, cell=cell)
        table.set_row(row.y, row)

def apply_document_tables_border_styles(document: odfdo.Document, styles: tuple[str]):
    """Apply borders styles to all table of the document
    Parameters:
        document(odfdo.Document): document containing tables.
        styles(tuple(str)): tuple of styles name generated by create_cell_styles function.
    """
    for table in document.body.get_tables():
        apply_cell_border_styles_to_table(table, styles[0], styles[1], styles[2], styles[3])

def create_shipment_header(document: odfdo.Document, shipment_index: int, shipment: str) -> odfdo.Table:
    """Create shipment table header
    Parameters:
        document(odfdo.document): document to alter.
        shipment_index(int): index of the shipment.
        shipment(str): date of the shipment.
    Returns:
        Table containing one row, the shipment number and date.
    """
    shipment_table = odfdo.Table(f'Shipment{shipment_index}')
    row = odfdo.Row(2)
    title_cell = odfdo.Cell(f'Livraison n°{shipment_index}', f'Livraison n°{shipment_index}', 'string')
    shipment_cell = odfdo.Cell(shipment, shipment, 'string')
    row.set_cells([title_cell, shipment_cell])
    shipment_table.append_row(row)
    return shipment_table

def create_product_table_header() -> odfdo.Row:
    """Create product table header
    Returns:
        odfdo.Row containing the name of the columns of the table. (name, price, pricekg, weight, quantity and units)
    """
    product_header = odfdo.Row(6)
    name_cell = odfdo.Cell('Nom', 'Nom', 'string')
    price_cell = odfdo.Cell('Prix (€)', 'Prix (€)', 'string')
    pricekg_cell = odfdo.Cell('Prix (kg)', 'Prix (kg)', 'string')
    weight_cell = odfdo.Cell('Poids', 'Poids', 'string')
    quantity_cell = odfdo.Cell('Quantité', 'Quantité', 'string')
    unit_cell = odfdo.Cell('Unité', 'Unité', 'string')
    product_header.set_cells([name_cell, price_cell, pricekg_cell, weight_cell, quantity_cell, unit_cell])
    return product_header

def create_product_table_row(product: dict, shipment_index: str="1") -> odfdo.Row:
    """Create a single row of the product table.
    Parameters:
        product(dict): dictionnary representing a product (name, price, pricekg, weight, unit, format).
        shipment_index(str): Optionnal shipment index to add to identifier.
    Returns:
        odfdo.Row representing a product.
    """
    row = odfdo.Row(6)
    name_cell = odfdo.Cell(product['name'], product['name'], 'string')
    price_cell = odfdo.Cell(product['price'], product['price'], 'string')
    pricekg_cell = odfdo.Cell(product['pricekg'], product['pricekg'], 'string')
    weight_cell = odfdo.Cell(product['weight'], product['weight'], 'string')
    quantity_cell = odfdo.Cell('{{'+format_product_identifier(product, shipment_index)+'}}', '{{'+format_product_identifier(product, shipment_index)+'}}', 'string')
    unit_cell = odfdo.Cell(product['unit'], product['unit'], 'string')
    row.set_cells([name_cell, price_cell, pricekg_cell, weight_cell, quantity_cell, unit_cell])
    return row

def create_product_table(document: odfdo.Document, shipment_index: int, products: list[dict]) -> odfdo.Table:
    """Create product table
    Parameters:
        document(odfdo.document): document to alter.
        shipment_index(int): index of the shipment to create table.
        products(list[dict]): list of products of this table.
    Returns:
        odfdo.Table representing the product table to insert inside the document.
    """
    widths = ["4.99cm", "1.69cm", "2.01cm", "4.39cm", "2.12cm", "2.38cm"]
    style = odfdo.Style(
        name="FixedTable", 
        family="table", 
        properties={
            "table:automatic-column-width": "false",
            "width": "100%",
        }
    )
    document.insert_style(style=style, name="FixedTable")
    
    product_table = odfdo.Table(f'Products{shipment_index}', style=style)
    for _ in widths:
        product_table.append(odfdo.Column())
    product_table.append(create_product_table_header())
    apply_column_width_style(document, product_table, widths)

    for product in products:
        product_row = create_product_table_row(product)
        product_table.append(product_row)

    return product_table

def create_column_style_width(size: str) -> odfdo.Style:
    """Create a table columm style for a given width.
    Paramenters:
        size(str): size of the style (format <number><unit>) unit can be in, cm... see odfdo documentation.
    Returns:
        odfdo.Style with the correct column-width attribute.
    """
    return odfdo.Element.from_tag(
        '<style:style style:name="product-table.A" style:family="table-column">'
        f'<style:table-column-properties style:column-width="{size}"/>'
        '</style:style>'
    )

def apply_column_width_style(document: odfdo.Document, table: odfdo.Table, widths: list[str]):
    """Apply column width style to a table.
    Parameters:
        document(odfdo.Document): Document where the table is located.
        table(odfdo.Table): Table to apply columns widths.
        widths(list[str]): list of width in format <number><unit> unit ca be in, cm... see odfdo documentation.
    """
    styles = []
    for w in widths:
        styles.append(document.insert_style(style=create_column_style_width(w), name=w, automatic=True))
    
    for position in range(table.width):
        col = table.get_column(position)
        col.style = styles[position]
        table.set_column(position, col)

def create_products_table_per_shipments(document: odfdo.Document, products: list[dict], shipments: list[str]):
    """Create all products tables. For each shipments.
    Parameters:
        document(odfdo.Document):
    """
    if len(products) <= 0:
        return

    title = get_title(document.body.get_elements('//text:h'), "Produits")
    index = len(shipments)
    
    for shipment in reversed(shipments):
        title_index = document.body.index(title)
        shipment_header = create_shipment_header(document, index, shipment)
        document.body.insert(shipment_header, 0, title_index + 1)

        product_table = create_product_table(document, index, products)
        document.body.insert(product_table, 0, title_index + 2)

        index -= 1
    size = 0
    for index, table in enumerate(list(filter(lambda x: "Products" in x.name or "Shipment" in x.name, document.body.get_tables()))):
        table_index = document.body.index(table)
        if "Products" in table.name:
            if size + len(table.get_rows()) > 25:
                document.add_page_break_style()
                document.body.insert(odfdo.PageBreak(), 0, table_index - 1)
                size = 0            
            elif index != 0:
                blank = odfdo.Paragraph("")
                document.body.insert(blank, 0, table_index - 1)
                size = size + len(table.get_rows())

def create_recurent_products_table(document: odfdo.Document, products: list[dict]):
    title = get_title(document.body.get_elements('//text:h'), "Produits")
    title_index = document.body.index(title)
    product_table = create_product_table(document, 1, products)
    document.body.insert(product_table, 0, title_index + 1)
    blank = odfdo.Paragraph("")
    document.body.insert(blank, 0, title_index + 2)


def get_title(headings: list[odfdo.header], text: str):
    header = list(filter(lambda header: header.text_recursive == text, headings))
    if len(header) <= 0:
        raise errors.HeaderNotInTemplateError(f'Table {name} was not found in given template file.')
    return header[0]

def get_table(tables: list[odfdo.Table], name='Informations'):
    table = list(filter(lambda table: table.name==name, tables))
    if len(table) <= 0:
        raise errors.TableNotInTemplateError(f'Table {name} was not found in given template file.')
    return table[0]

def fill_document_informations(document: odfdo.Document, informations: dict):
    """Fill mustache tags inside given document
    Parameters:
        document(odfdo.Document): Odfdo template document.
        informations(Contract): Contract information object.

    Returns:
        Odfdo document filled with Contract informations.
    """
    body = document.body
    for paragraph in body.get_paragraphs():
        for key in informations.keys():
            if '{{'+ key +'}}' in paragraph.text_recursive:
                style_name = paragraph.get_attribute("text:style-name")
                text = paragraph.text_recursive.replace('{{'+ key +'}}', informations[key])
                paragraph.clear()
                if style_name:
                    paragraph.set_attribute("text:style-name", style_name)
                paragraph.append(text)

def create_document_from_template(template: io.BytesIO):
    document = odfdo.Document.new(template)
    return document

def generate_contract_template(document: odfdo.Document, informations: dict):
    fill_document_informations(document, informations)
    if informations['custom_shipment']:
        create_products_table_per_shipments(document, informations['products'], informations['shipments'])
    else:
        # XXX: one shot products could be only for one specific shipment, this is not possible for now.
        create_products_table_per_shipments(document, list(filter(lambda x: x['format'] == 'oneshot', informations['products'])), informations['shipments'])
        create_recurent_products_table(document, list(filter(lambda x: x['format'] == 'recurrent', informations['products'])))
    cell_styles = create_cell_styles(document)
    apply_document_tables_border_styles(document, cell_styles)

# Name 18 char max
# Weight 16 char max